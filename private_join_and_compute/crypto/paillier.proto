/*
 * Copyright 2019 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package private_join_and_compute;

// Holds a Paillier Public Key.
message PaillierPublicKey {
  // Contains a serialized BigNum encoding the Paillier modulus n.
  optional bytes n = 1;
  // Contains the Damgard-Jurik exponent corresponding to this key. The Paillier
  // modulus will be n^(s+1), and the message space will be n^s.
  optional int32 s = 2;
}

message PaillierPrivateKey {
  // p and q contain serialized BigNums, such that the Paillier modulus n=pq.
  optional bytes p = 1;
  optional bytes q = 2;

  // Contains the Damgard-Jurik exponent corresponding to this key. The Paillier
  // modulus will be n^(s+1), and the message space will be n^s.
  optional int32 s = 3;
}
