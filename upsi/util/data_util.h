#pragma once

#include <string>
#include <tuple>
#include <utility>
#include <vector>

#include "absl/strings/string_view.h"
#include "upsi/crypto/context.h"
#include "upsi/network/upsi.pb.h"
#include "upsi/util/status.inc"
#include "upsi/utils.h"

namespace upsi {

// Random Identifiers generated by this library will be this many bytes long.
static const int64_t kRandomIdentifierLengthBytes = 32;

class Dataset {
    protected:
        Context* ctx;

    public:
        std::vector<std::string> elements;
        std::vector<int64_t> values;

        Dataset(
            Context* ctx, const std::vector<std::string>& elements
        ) : ctx(ctx), elements(elements) { }

        Dataset(
            Context* ctx,
            const std::vector<std::string>& elements,
            const std::vector<int64_t>& values
        ) : ctx(ctx), elements(elements), values(values) { }

        Dataset(Context* ctx, const std::string& fn);
        Status Write(const std::string& fn) const;
        void Print() const;
        std::vector<BigNum> Elements() const;
        std::vector<std::pair<BigNum, BigNum>> ElementsAndValues() const;
};

std::vector<Dataset> ReadDailyDatasets(Context* ctx, std::string dir, int days);

std::tuple<std::vector<Dataset>, std::vector<Dataset>, int64_t> GenerateAddOnlySets(
    Context* ctx,
    std::vector<uint32_t> sizes,
    uint32_t shared_size,
    uint32_t max_value
);

std::tuple<std::vector<Dataset>, std::vector<Dataset>, int64_t> GenerateDeletionSets(
    Context* ctx,
    std::vector<uint32_t> sizes,
    uint32_t shared_size,
    uint32_t max_value
);


}  // namespace upsi
