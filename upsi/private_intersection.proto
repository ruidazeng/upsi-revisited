/*
 * Copyright 2019 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package upsi;

import "upsi/match.proto";

// Client Messages

message PartyZeroMessage {
  oneof message_content {
    StartProtocolRequest start_protocol_request = 1;
    ClientRoundOne client_round_one = 2;
  }

  // For initiating the protocol.
  // Client key exchange - Threshold ElGamal
  message StartProtocolRequest {
    optional bytes elgamal_p = 1; // modulus of the integer group
    optional bytes elgamal_g = 2;
    optional bytes elgamal_y = 3;
  }

  // Message containing the client's set encrypted under the client's keys, and
  // the server's set re-encrypted with the client's key, and shuffled.
  message ClientRoundOne {
    optional HashSet hash_set = 1;
    optional EncryptedNodes encrypted_nodes = 2;
    optional EncryptedSet encrypted_set = 3;
  }

}

// Server Messages.

message PartyOneMessage {
  oneof message_content {
    ServerExchange server_key_exchange = 1;
    ServerRoundOne server_round_one = 2;
  }

  // Server key exchange - Threshold ElGamal
  message ServerExchange {
    optional bytes elgamal_p = 1; // modulus of the integer group
    optional bytes elgamal_g = 2;
    optional bytes elgamal_y = 3;
  }

  message ServerRoundOne {
    optional HashSet hash_set = 1;
    optional EncryptedNodes encrypted_nodes = 2;
    optional EncryptedSet encrypted_set = 3;
  }
}
