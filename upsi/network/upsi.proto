/*
 * Copyright 2019 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package upsi;

import "upsi/crypto/elgamal.proto";

// the basic interface
service UPSIRpc {
    rpc Handle(ClientMessage) returns (ServerMessage) {}
}


/*
 * PROTOCOL DATA TYPES
 */
message EncryptedElement {
    oneof element_type {
        NoPayload no_payload = 1;
        PaillierPayload paillier = 2;
        ElGamalPayload elgamal = 3;
        DeletionElement deletion = 4;
        OnlyPaillier only_paillier = 5;
    }

    message NoPayload {
        optional ElGamalCiphertext element = 1;
    }

    message PaillierPayload {
        optional ElGamalCiphertext element = 1;
        optional bytes payload = 2;
    }

    message ElGamalPayload {
        optional ElGamalCiphertext element = 1;
        optional ElGamalCiphertext payload = 2;
    }

    message DeletionElement {
        optional bytes element = 1;
        optional bytes payload = 2;
    }

    message OnlyPaillier {
        optional bytes element = 1;
    }
}

message EncryptedSet {
    repeated EncryptedElement elements = 1;
}

message EncryptedSetVector {
	repeated EncryptedSet elements = 1;
}

message TreeNode {
    repeated EncryptedElement elements = 2;
}

message TreeUpdates {
    repeated bytes hashes = 1;
    repeated TreeNode nodes = 2;
}

message PaillierCiphertext {
    optional bytes ciphertext = 1;
}

// FOR WRITING TREES INTO FILES
message PlaintextElement {
    optional bytes element = 1;
    optional bytes payload = 2;
}

// node size is needed here because plaintext nodes won't always be
// padded to the maximum (unlike the ciphertext nodes)
message PlaintextNode {
    repeated PlaintextElement elements = 1;
    optional int32 node_size = 2;
}

message PlaintextTree {
    repeated PlaintextNode nodes = 1;
    optional int32 stash_size = 2;
    optional int32 node_size = 3;
    optional int32 actual_size = 4;
    optional int32 depth = 5;
}

message EncryptedTree {
    repeated TreeNode nodes = 1;
    optional int32 stash_size = 2;
    optional int32 node_size = 3;
    optional int32 actual_size = 4;
    optional int32 depth = 5;
}

message OPRF_KV {
    optional bytes element = 1;
    optional bytes output = 2;
}

message OPRF {
    repeated OPRF_KV kv = 1;
}

// FOR THE ORIGINAL PSI PROTOCOL
message OriginalMessage {
    oneof message_content {
        MessageI message_i = 1;
        MessageII message_ii = 2;
        MessageIII message_iii = 3;
        MessageIV message_iv = 4;
        MessageV message_v = 5;
    }

    message MessageI {
        optional TreeUpdates updates = 1;
        repeated bytes ciphertexts = 2;
    }

    message MessageII {
        repeated EncryptedSet candidates  = 1;
    }

    message MessageIII {
        repeated EncryptedSet candidates  = 1;
    }

    message MessageIV {
        repeated bytes ciphertexts = 1;
    }

    message MessageV {
        repeated bytes ciphertexts = 1;
    }
}


// PARTY ZERO
message PartyZeroMessage {
    oneof message_content {
        //StartProtocolRequest start = 1;
        MessageI message_i = 1;
        MessageIII_SUM message_iii_sum = 2;
        MessageIII_SS message_iii_ss = 3;
    }

    // For initiating the protocol.
    // Client key exchange - Threshold ElGamal
    message StartProtocolRequest { }

    // Message containing the client's set encrypted under the client's keys, and
    // the server's set re-encrypted with the client's key, and shuffled.
    message MessageI {
        optional TreeUpdates updates = 1;
        optional EncryptedSet candidates = 2;
        optional EncryptedSetVector candidates_vct = 3;
    }

    message MessageIII_SUM {
        optional ElGamalCiphertext sum = 1;
    }

    message MessageIII_SS {
        repeated PaillierCiphertext payloads = 1;
    }
}

message ClientMessage {
    oneof client_message_oneof {
        PartyZeroMessage party_zero_msg = 1;
        OriginalMessage og_msg = 2;
    }
}

// PARTY ONE
message PartyOneMessage {
    oneof message_content {
        //ServerExchange server_key_exchange = 1;
        MessageII message_ii = 1;
        MessageIV message_iv = 2;
    }

    // Server key exchange - Threshold ElGamal
    message ServerExchange { }

    message MessageII {
        optional TreeUpdates updates = 1;
        optional EncryptedSet candidates = 2;
        optional EncryptedSetVector candidates_vct = 3;
    }

    message MessageIV {
        optional ElGamalCiphertext sum = 1;
    }
}

message ServerMessage {
    oneof server_message_oneof {
        PartyOneMessage party_one_msg = 1;
        OriginalMessage og_msg = 2;
    }
}
